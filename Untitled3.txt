interface VideoCall {
    boolean startCall(String userId);
    boolean endCall(String userId);
}

interface UserManagement {
    boolean addUser(String userId);
    boolean removeUser(String userId);
}

interface MeetingScheduler {
    boolean scheduleMeeting(String meetingId, String[] participants);
}




public class VideoConferencingToolTest {

    private VideoCall videoCall;
    private UserManagement userManagement;
    private MeetingScheduler meetingScheduler;

    @Before
    public void setUp() {
        videoCall = mock(VideoCall.class);
        userManagement = mock(UserManagement.class);
        meetingScheduler = mock(MeetingScheduler.class);
    }

    @Test
    public void testVideoCallFunctionality() {
        String userId = "user123";

        when(videoCall.startCall(userId)).thenReturn(true);
        when(videoCall.endCall(userId)).thenReturn(true);

        assertTrue(videoCall.startCall(userId));
        assertTrue(videoCall.endCall(userId));

        verify(videoCall, times(1)).startCall(userId);
        verify(videoCall, times(1)).endCall(userId);
    }

    @Test
    public void testUserManagement() {
        String userId = "user123";

        when(userManagement.addUser(userId)).thenReturn(true);
        when(userManagement.removeUser(userId)).thenReturn(true);

        assertTrue(userManagement.addUser(userId));
        assertTrue(userManagement.removeUser(userId));

        verify(userManagement, times(1)).addUser(userId);
        verify(userManagement, times(1)).removeUser(userId);
    }

    @Test
    public void testMeetingScheduling() {
        String meetingId = "meeting456";
        String[] participants = {"user123", "user456"};

        when(meetingScheduler.scheduleMeeting(meetingId, participants)).thenReturn(true);

        assertTrue(meetingScheduler.scheduleMeeting(meetingId, participants));

        verify(meetingScheduler, times(1)).scheduleMeeting(meetingId, participants);
    }
}
